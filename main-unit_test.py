# Generated by Qodo Gen
from func import main
import unittest.mock

class TestMain(unittest.TestCase):

    # Correctly converts valid input to integer and processes it
    def test_valid_integer_input(self):
        with unittest.mock.patch('builtins.input', side_effect=['123', '1', '6']):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_any_call('=' * 50 + '\nNumber of digits in the 123: 3\n' + '=' * 50)

    # Handles non-integer input gracefully with an error message
    def test_non_integer_input(self):
        with unittest.mock.patch('builtins.input', side_effect=['abc', '1', '6']):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_any_call('Error: invalid literal for int() with base 10: \'abc\'')

    # Processes negative numbers correctly
    def test_negative_number_input(self):
        with unittest.mock.patch('builtins.input', side_effect=['-456', '2', '6']):
            with unittest.mock.patch('builtins.print') as mock_print:
                main()
                mock_print.assert_any_call('=' * 50 + '\nSum of the digits in the -456: 15\n' + '=' * 50)