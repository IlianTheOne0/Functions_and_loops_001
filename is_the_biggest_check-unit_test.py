# Generated by Qodo Gen

from func import is_the_biggest_check
import unittest

class TestIsTheBiggestCheck(unittest.TestCase):

    # Returns a tuple with two elements
    def test_returns_tuple_with_two_elements(self):
        result = is_the_biggest_check(3, 5)
        self.assertIsInstance(result, tuple)
        self.assertEqual(len(result), 2)

    # returns (a, b) when a is less than b
    def test_returns_a_b_when_a_is_less_than_b(self):
        result = is_the_biggest_check(1, 2)
        self.assertEqual(result, (1, 2))

    # Handles equal values correctly
    def test_handles_equal_values(self):
        result = is_the_biggest_check(4, 4)
        self.assertEqual(result, (4, 4))

    # Handles large integer values
    def test_handles_large_integer_values(self):
        large_value = 10**18
        result = is_the_biggest_check(large_value, large_value - 1)
        self.assertEqual(result, (large_value - 1, large_value))

    # handles negative values for a and b
    def test_handles_negative_values(self):
        result = is_the_biggest_check(-3, -1)
        self.assertEqual(result, (-3, -1))

    # handles zero values for a and b
    def test_handles_zero_values(self):
        result = is_the_biggest_check(0, 0)
        self.assertEqual(result, (0, 0))